lines(aa.200)
lines(AA[,6])
MA.pick = function(price,ma1=60,ma2=200)
{
ma.60 = SMA(x=price,n=ma1)
ma.200 = SMA(x=price,n=ma2)
plot(price,type="l")
lines(ma.60,col="red")
lines(ma.200,col="blue")
}
MA.pick(price=data[,2])
names(data[,2])
ma.pick = function(price,ma1=60,ma2=200)
{
ma.60 = SMA(x=price,n=ma1)
ma.200 = SMA(x=price,n=ma2)
plot(price,type="l",main=names(price))
lines(ma.60,col="red")
lines(ma.200,col="blue")
}
ma.pick(price=data[,2])
for( i in 1:30)
{ma.pick(price=data[,i])}
choose(3,1)
choose(4,2)
K = 4
pi = c(0.1,0.3,0.2,NA,NA)
A = 1/pi[1]
beta = log(pi[,2]) + log(A)-log(K)
gamma = log(pi[3]) - 2*log(pi[,2]) - log(A) + 2*log(K) - log(choose(K,2))
pis = function(s)
{
choose(K,s)*exp(s*beta+choose(s,2)*gamma)/A
}
pi = c(0.1,0.3,0.2,NA,NA)
A = 1/pi[1]
beta = log(pi[2]) + log(A)-log(K)
gamma = log(pi[3]) - 2*log(pi[2]) - log(A) + 2*log(K) - log(choose(K,2))
pis = function(s)
{
choose(K,s)*exp(s*beta+choose(s,2)*gamma)/A
}
pis(3);pis(4)
exp(beta)
exp(beta)/A
exp(beta)/A*K
?uniroot
f <- function (x, a) x - a
str(xmin <- uniroot(f, c(0, 1), tol = 0.0001, a = 1/3))
uniroot(f, c(0, 1), tol = 0.0001, a = 1/3)
1/2/3
4/2/2
obj = function(K,pi0,pi1,gamma)
{
value = 0
for (s in 2:K)
{
value = value + pi0*choose(K,s)*exp(s*log(pi1/pi0/K)+choose(s,2)*gamma)
}
value + pi0 + pi1 -1
}
obj(K=4,pi0=0.4,pi1=0.3,gamma=0)
obj(K=4,pi0=0.4,pi1=0.3,gamma=10)
uniroot(f=obj,interval=c(0,10),K=4,pi0=0.4,pi1=0.3)
probs = function(s,K,pi0,pi1,gamma)
{
Pi = c(pi0,pi1)
for (s in 2:K)
{
Pi[s+1] = pi0*choose(K,s)*exp(s*log(pi1/pi0/K)+choose(s,2)*gamma)
}
Pi
}
uniroot(f=obj,interval=c(0,10),K=4,pi0=0.4,pi1=0.3)
ga = uniroot(f=obj,interval=c(0,10),K=4,pi0=0.4,pi1=0.3)
probs = function(K,pi0,pi1,gamma)
{
Pi = c(pi0,pi1)
for (s in 2:K)
{
Pi[s+1] = pi0*choose(K,s)*exp(s*log(pi1/pi0/K)+choose(s,2)*gamma)
}
Pi
}
probs(K=4,pi0=0.4,pi1=0.3,gamma=ga)
ga
ga$root
probs(K=4,pi0=0.4,pi1=0.3,gamma=ga$root)
uniroot(f=obj,interval=c(-200,200),K=5,pi0=0.4,pi1=0.3)
ga = uniroot(f=obj,interval=c(-200,200),K=5,pi0=0.4,pi1=0.3)
probs(K=4,pi0=0.4,pi1=0.3,gamma=ga$root)
probs(K=5,pi0=0.4,pi1=0.3,gamma=ga$root)
ga = uniroot(f=obj,interval=c(-200,200),K=5,pi0=0.2,pi1=0.4)
probs(K=5,pi0=0.4,pi1=0.3,gamma=ga$root)
ga = uniroot(f=obj,interval=c(-200,200),K=5,pi0=0.2,pi1=0.4)
probs(K=5,pi0=0.2,pi1=0.4,gamma=ga$root)
ga
ga = uniroot(f=obj,interval=c(-200,200),K=10,pi0=0.2,pi1=0.4)
probs(K=10,pi0=0.2,pi1=0.4,gamma=ga$root)
Pi = probs(K=10,pi0=0.2,pi1=0.4,gamma=ga$root)
bar(Pi)
barplot(Pi)
obj = function(K,pi0,pi1,gamma)
{
value = 0
for (s in 2:K)
{
value = value + pi0*choose(K,s)*exp(s*log(pi1/pi0/K)+choose(s,2)*gamma)
}
value + pi0 + pi1 -1
}
obj(K=4,pi0=0.4,pi1=0.3,gamma=10)
probs = function(K,pi0,pi1,gamma)
{
Pi = c(pi0,pi1)
for (s in 2:K)
{
Pi[s+1] = pi0*choose(K,s)*exp(s*log(pi1/pi0/K)+choose(s,2)*gamma)
}
Pi
}
ga = uniroot(f=obj,interval=c(-200,200),K=10,pi0=0.2,pi1=0.4)
Pi = probs(K=10,pi0=0.2,pi1=0.4,gamma=ga$root)
barplot(Pi)
ga = uniroot(f=obj,interval=c(-200,200),K=10,pi0=0.2,pi1=0.7)
Pi = probs(K=10,pi0=0.2,pi1=0.7,gamma=ga$root)
barplot(Pi)
Pi
plot(0:10,log(Pi))
ga = uniroot(f=obj,interval=c(-200,200),K=10,pi0=0.7,pi1=0.2)
Pi = probs(K=10,pi0=0.7,pi1=0.2,gamma=ga$root)
#barplot(Pi)
points(0:10,log(Pi))
barplot(Pi)
Pi
ga
choose(10,5)
library("quantmod")
library(doMC)
library(foreach)
install.packages("doMC","foreach")
install.packages("doMC")
install.packages("foreach")
library("quantmod")
library(doMC)
library(foreach)
DJIA =  c("AA", "AXP", "BA", "BAC", "CAT", "CSCO", "CVX", "DD", "DIS",
"GE", "HD", "HPQ", "IBM", "INTC", "JNJ", "JPM", "KO", "MCD", "MMM", "MRK",
"MSFT", "PFE", "PG", "T", "TRV", "UNH", "UTX", "VZ", "WMT", "XOM")
registerDoMC(2)
foreach(i=1:length(DJIA)) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
}
?assign
registerDoMC(2)
foreach(i=1:6) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
tmp = foreach(i=1:6) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
tmp[[1]]
head(tmp[[1]])
?foreach
tmp = foreach(i=1:6, .verbose=TRUE, ) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
tmp = foreach(i=1:6, .verbose=TRUE ) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
tmp = foreach(i=1:6, .export=DJIA[1:6] ) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
assign("a",2)
?Ad
tmp = foreach(i=1:6, ) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
get(tickers[1])
}
tmp = foreach(i=1:6) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
get(tickers[1])
}
rm(tmp)
tmp = foreach(i=1:6) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
get(tickers[1])
}
rm(a)
head(tmp[[2]])
head(tmp[[6]])
?sys.pause
??sys.pause
??pause
15%%5
15%%6
load("~/Dropbox/Learn.Investment/model/data/DJIA05to15.RData")
tmp = get(tickers[17])
plot(log(tmp[,6]))
scale(plot(log(tmp[,6])))
plot(scale(log(tmp[,6])))
get.feature = function(id,datalist)
{
tmp = datalist[[id]]
features = matrix(NA,nrow=nrow(tmp),ncol=37)
prc = scale(log(tmp[,6]+1))
features[,1] = vol = scale(log(tmp[,5]+1))
features[,2] = vol.ma5 = SMA(x=vol,n=5)
features[,3] = vol.ma20 = SMA(x=vol,n=20)
vol.ma100 = SMA(x=vol,n=100)
features[,4] = vol.R1 = vol-vol.ma20
features[,5] = vol.R2 = vol.ma5-vol.ma20
features[,6] = vol.R3 = vol.ma5-vol.ma100
features[,7] = vol.lag1 = lag(vol,1)-vol.ma20
features[,8] = vol.lag2 = lag(vol,2)-vol.ma20
features[,9] = vol.lag3 = lag(vol,3)-vol.ma20
features[,10] = vol.lag4 = lag(vol,4)-vol.ma20
features[,11] = vol.lag5 = lag(vol,5)-vol.ma20
prc.ma20 = SMA(x=prc,n=20)
prc.ma60 = SMA(x=prc,n=60)
prc.ma150 = SMA(x=prc,n=150)
features[,12] = dprc.ma20 = (prc.ma20-lag(prc.ma20,2))/2
features[,13] = dprc.ma60 = (prc.ma60-lag(prc.ma60,2))/2
features[,14] = dprc.ma150 = (prc.ma150-lag(prc.ma150,2))/2
features[,15] = diff1 = prc.ma20 - prc.ma60
features[,16] = diff2 = prc.ma20 - prc.ma150
features[,17] = diff3 = prc.ma60 - prc.ma150
features[,18] = prc - prc.ma20
features[,19] = prc - prc.ma60
features[,20] = prc - prc.ma150
features[,21] = cmf = CMF(tmp[,2:4],tmp[,5])
features[,22] = volatile = volatility(tmp[,1:4],calc="yang.zhang")
tdi = TDI(tmp[,6],n=30)
features[,23] = tdi[,1]
features[,24] = tdi[,2]
adx = ADX(tmp[,2:4])
features[,25:28] = adx[,1:4]
atr = ATR(tmp[,2:4])
features[,29:30] = atr[,1:2]
features[,31] = CCI(tmp[,2:4])
features[,32] = chaikinAD(tmp[,2:4],tmp[,5])
features[,33] = CMO(prc)
features[,34:35] = EMV(tmp[,2:3],tmp[,5])[,1:2]
features[,36:37] = KST(tmp[,6])
features
}
get.outcome = function(id,datalist,period=20,bin=FALSE,threshold=0.05,stoploss = -0.01)
{
tmp = datalist[[id]]
prc = tmp[,6]
prc.mat = matrix(NA,nrow=length(prc),ncol=period)
for (j in 1:period)
{
prc.mat[,j] = lag(prc,k=-j)
}
prc.future = cbind(prc,prc.mat)
max.up = apply(prc.future,1,max)
max.down = apply(prc.future,1,min)
chg.perc = (max.up-prc)/prc
if (bin)
{return(as.integer(chg.perc>threshold & (max.down-prc)/prc>stoploss))}
else
{return(cbind(chg.perc,(max.down-prc)/prc))}
}
X = get.feature(1,list(PG))
Y = get.outcome(1,list(PG),period=300,bin=TRUE,threshold=0.22,stoploss=-0.05)
hist(Y)
XY = as.data.frame(cbind(Y,X))
plot(1:2546,get("PG")[,6],type="l")
points((1:2546)[which(Y==1)],get("PG")[which(Y==1),6],pch=10,col="red")
lines((1:2546),SMA(get("PG")[,6],n=150))
lines((1:2546),SMA(get("PG")[,6],n=60),col="blue")
rf.fit1 = randomForest(factor(Y) ~ .,data=XY[200:2200,],
type="classification",mtry=5,ntree=500)
library("e1071")
library('randomForest')
rf.fit1 = randomForest(factor(Y) ~ .,data=XY[200:2200,],
type="classification",mtry=5,ntree=500)
pred1= predict(rf.fit1,newdata=XY[2201:2450,],type="prob")
positive = which(colnames(pred1)==1)
probpred = pred1[,positive]
table(XY[2201:2450,1],as.integer(probpred >= 0.5))
pred1= predict(rf.fit1,newdata=XY[2201:2450,],type="prob")
positive = which(colnames(pred1)==1)
probpred = pred1[,positive]
table(XY[2201:2450,1],as.integer(probpred >= 0.3))
table(XY[2201:2450,1],as.integer(probpred >= 0.4))
pred1= predict(rf.fit1,newdata=XY[201:2450,],type="prob")
positive = which(colnames(pred1)==1)
probpred = pred1[,positive]
table(XY[201:2450,1],as.integer(probpred >= 0.4))
library("quantmod")
library("xts")
?getQuote
getQuote("AAPL")
require("plyr")
what_metrics <- yahooQF(c("Price/Sales",
"P/E Ratio",
"Price/EPS Estimate Next Year",
"PEG Ratio",
"Dividend Yield",
"Market Capitalization"))
tickers <- c("AAPL", "FB", "GOOG", "HPQ", "IBM", "MSFT", "ORCL", "SAP")
# Not all the metrics are returned by Yahoo.
metrics <- getQuote(paste(tickers, sep="", collapse=";"), what=what_metrics)
View(metrics)
library("quantmod")
getFin('AAPL')
AAPL.f
viewFin
viewFin(AAPL.f)
AAPL.f$IS
AAPL.f$IS$Q
setwd("~/Google Drive/PhD coursework/Course Materials/Parallel Programming/project1/output")
serial = read.table("q1.serial.txt",header=TRUE,sep=",")
View(serial)
serial[serial$OuterLoop=="filter",]
serial[serial$OuterLoop=="Filter",]
serial$OuterLoop
as.char(serial$OuterLoop)
as.character(serial$OuterLoop)
serial[as.character(serial$OuterLoop)=="Filter",]
as.character(serial$OuterLoop)=="Filter"
as.character(serial$OuterLoop)
tmp = as.character(serial$OuterLoop)
tmp=="Filter"
tmp[2]
as.character(serial$OuterLoop)==" Filter"
runtime = serial$Seconds + serial$Microseconds/1000000
serial = cbind(serial,runtime)
filter.serial = serial[as.character(serial$OuterLoop)==" Filter",]
View(filter.serial)
filter.serial = serial[as.character(serial$OuterLoop)==" Filter",5:6]
View(filter.serial)
avg.time = c(); filter.len = c()
for (i in 1:11)
{
avg.time[i] = mean(filter.serial$runtime[((i-1)*20+1) :i*20])
filter.len[i] = 2^(i-1)
}
avg.time
filter.serial$runtime
mean(filter.serial$runtime[((2-1)*20+1) :2*20])
filter.serial$runtime[((2-1)*20+1) :2*20]
filter.serial$runtime
filter.serial$runtime[21:40]
avg.time = c(); filter.len = c()
for (i in 1:11)
{
avg.time[i] = mean(filter.serial$runtime[((i-1)*20+1) :(i*20)])
filter.len[i] = 2^(i-1)
}
?log
data.serial = serial[as.character(serial$OuterLoop)==" Data",5:6]
View(data.serial)
plot(log2(filter.len),avg.time.filter/filter.len,type="l",col="blue",
xlab="log filter length with base 2",ylab="average running time / filter length (s)",
ylim=c(0.07,0.2))
lines(log2(filter.len),avg.time.data/filter.len,type="l",col="red")
serial = read.table("q1.serial.txt",header=TRUE,sep=",")
runtime = serial$Seconds + serial$Microseconds/1000000
serial = cbind(serial,runtime)
filter.serial = serial[as.character(serial$OuterLoop)==" Filter",5:6]
data.serial = serial[as.character(serial$OuterLoop)==" Data",5:6]
avg.time.filter = c(); filter.len = c(); avg.time.data = c()
for (i in 1:11)
{
avg.time.filter[i] = mean(filter.serial$runtime[((i-1)*20+1) :(i*20)])
avg.time.data[i] = mean(data.serial$runtime[((i-1)*20+1) :(i*20)])
filter.len[i] = 2^(i-1)
}
plot(log2(filter.len),avg.time.filter/filter.len,type="l",col="blue",
xlab="log filter length with base 2",ylab="average running time / filter length (s)",
ylim=c(0.07,0.2))
lines(log2(filter.len),avg.time.data/filter.len,type="l",col="red")
plot(log2(filter.len),avg.time.filter/filter.len,type="l",col="blue",
xlab="log filter length with base 2",ylab="average running time / filter length (s)",
ylim=c(0.07,0.12))
lines(log2(filter.len),avg.time.data/filter.len,type="l",col="red")
plot(log2(filer.len),avg.time.filter/avg.time.data,type = "l", col = "blue",
xlab="log filter length with base 2",ylab="relative performance: filter-first time / data-first time")
plot(log2(filter.len),avg.time.filter/avg.time.data,type = "l", col = "blue",
xlab="log filter length with base 2",ylab="relative performance: filter-first time / data-first time")
speedup = read.table("q1.serial.txt",header=TRUE,sep=",")
View(speedup)
speedup = read.table("q2.speedup.txt",header=TRUE,sep=",")
View(speedup)
runtime = speedup$Seconds + speedup$Microseconds/1000000
speedup = cbind(speedup,runtime)
filter.speedup = speedup[as.character(speedup$OuterLoop)==" Filter",5:6]
data.speedup= speedup[as.character(speedup$OuterLoop)==" Data",5:6]
View(data.speedup)
View(speedup)
filter.speedup = speedup[as.character(speedup$OuterLoop)==" Filter",7:8]
data.speedup= speedup[as.character(speedup$OuterLoop)==" Data",7:8]
View(data.speedup)
plot(filter.speedup$Threads, filter.speedup$runtime[1]/filter.speedup$runtime)
plot(filter.speedup$Threads, filter.speedup$runtime[1]/filter.speedup$runtime, type="l", col="blue")
lines(data.speedup$Threads, data.speedup$runtime[1]/data.speedup$runtime, col="blue")
lines(data.speedup$Threads, data.speedup$runtime[1]/data.speedup$runtime, col="red")
scaleup = read.table("q2.scaleup.txt",header=TRUE,sep=",")
runtime = speedup$Seconds + speedup$Microseconds/1000000
scaleup = cbind(scaleup,runtime)
filter.scaleup = scaleup[as.character(scaleup$OuterLoop)==" Filter",7:8]
data.scaleup= scaleup[as.character(scaleup$OuterLoop)==" Data",7:8]
scaleup = read.table("q2.scaleup.txt",header=TRUE,sep=",")
runtime = scaleup$Seconds + scaleup$Microseconds/1000000
scaleup = cbind(scaleup,runtime)
filter.scaleup = scaleup[as.character(scaleup$OuterLoop)==" Filter",7:8]
data.scaleup= scaleup[as.character(scaleup$OuterLoop)==" Data",7:8]
View(data.scaleup)
View(filter.scaleup)
View(data.scaleup)
plot(filter.scaleup$Threads[1:5], filter.scaleup$runtime[1]/filter.scaleup$runtime[1:5], type="l", col="blue",
xlab="Number of threads",ylab="Speed-up: Ts/Tl")
lines(data.scaleup$Threads[1:5], data.scaleup$runtime[1]/data.scaleup$runtime[1:5], col="red")
legend("bottomright",legend=c("Filter first","Data first"),col=c("blue","red"),lty=1)
plot(filter.scaleup$Threads[6:10], filter.scaleup$runtime[1]/filter.scaleup$runtime[6:10], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn")
lines(data.scaleup$Threads[6:10], data.scaleup$runtime[1]/data.scaleup$runtime[6:10], col="red")
legend("topright",legend=c("Filter first","Data first"),col=c("blue","red"),lty=1)
layout(matrix(1,nrow=1))
plot(filter.scaleup$Threads[1:5], filter.scaleup$runtime[1]/filter.scaleup$runtime[1:5], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn",ylim=c(0.28,1.05))
lines(data.scaleup$Threads[1:5], data.scaleup$runtime[1]/data.scaleup$runtime[1:5], col="red")
legend("topright",legend=c("Filter first","Data first"),col=c("blue","red"),lty=1)
plot(filter.scaleup$Threads[1:5], filter.scaleup$runtime[1]/filter.scaleup$runtime[1:5], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn",ylim=c(0.28,1.07))
lines(data.scaleup$Threads[1:5], data.scaleup$runtime[1]/data.scaleup$runtime[1:5], col="red")
legend("topright",legend=c("Filter first","Data first"),col=c("blue","red"),lty=1)
plot(filter.scaleup$Threads[6:10], filter.scaleup$runtime[1]/filter.scaleup$runtime[6:10], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn")
lines(data.scaleup$Threads[6:10], data.scaleup$runtime[1]/data.scaleup$runtime[6:10], col="red")
legend("topright",legend=c("Filter first","Data first"),col=c("blue","red"),lty=1)
layout(matrix(1,nrow=1))
plot(filter.scaleup$Threads[6:10], filter.scaleup$runtime[1]/filter.scaleup$runtime[6:10], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn", ylim=c(0.27,1.07))
lines(data.scaleup$Threads[6:10], data.scaleup$runtime[1]/data.scaleup$runtime[6:10], col="red")
legend("topright",legend=c("Filter first","Data first"),col=c("blue","red"),lty=1)
plot(filter.scaleup$Threads[6:10], filter.scaleup$runtime[1]/filter.scaleup$runtime[6:10], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn", ylim=c(0.27,1.11))
lines(data.scaleup$Threads[6:10], data.scaleup$runtime[1]/data.scaleup$runtime[6:10], col="red")
legend("topright",legend=c("Filter first","Data first"),col=c("blue","red"),lty=1)
plot(filter.scaleup$Threads[6:10], filter.scaleup$runtime[6]/filter.scaleup$runtime[6:10], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn", ylim=c(0.27,1.11))
lines(data.scaleup$Threads[6:10], data.scaleup$runtime[6]/data.scaleup$runtime[6:10], col="red")
legend("topright",legend=c("Filter first","Data first"),col=c("blue","red"),lty=1)
View(scaleup)
speedup = read.table("q2.speedup.txt",header=TRUE,sep=",")
runtime = speedup$Seconds + speedup$Microseconds/1000000
speedup = cbind(speedup,runtime)
filter.speedup = speedup[as.character(speedup$OuterLoop)==" Filter",7:8]
data.speedup= speedup[as.character(speedup$OuterLoop)==" Data",7:8]
View(data.speedup)
data.speedup[1,2]/data.speedup[4,2]
(1/3.896627 -1)/(1/4-1)
op = read.table("q3.optim.txt",header=TRUE,sep=",")
runtime = op$Seconds + op$Microseconds/1000000
op = cbind(op,runtime)
View(op)
plot(op$Threads[1:5], op$runtime[1]/op$runtime[1:5], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn",ylim=c(0.27,1.07),
main="Fix Data, Increase Filter")
plot(op$Threads[1:5], op$runtime[1]/op$runtime[1:5], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn",
main="Fix Data, Increase Filter")
plot(op$Threads[1:5], op$runtime[1]/op$runtime[1:5], type="l", col="blue",
xlab="Number of threads",ylab="Speedup: Ts/Tn",
main="Speedup")
lines(data.speedup$Threads[1:5], data.speedup$runtime[1]/data.speedup$runtime[1:5], col="red")
legend("bottomright",legend=c("Collapsed","Data first"),col=c("blue","red"),lty=1)
layout(matrix(1:2,nrow=1))
plot(op$Threads[1:5], op$runtime[1]/op$runtime[1:5], type="l", col="blue",
xlab="Number of threads",ylab="Speedup: Ts/TL",
main="Speedup")
lines(data.speedup$Threads[1:5], data.speedup$runtime[1]/data.speedup$runtime[1:5], col="red")
legend("bottomright",legend=c("Collapsed","Data first"),col=c("blue","red"),lty=1)
plot(op$Threads[6:10], op$runtime[6]/op$runtime[6:10], type="l", col="blue",
xlab="Number of threads",ylab="Scale-up: Ts/Tn",
main="Scaleup")
lines(data.scaleup$Threads[6:10], data.scaleup$runtime[6]/data.scaleup$runtime[6:10], col="red")
legend("topright",legend=c("Collapse","Data first"),col=c("blue","red"),lty=1)
layout(matrix(1,nrow=1))
plot(op$Threads[1:5], op$runtime[1:5]/data.speedup$runtime[1:5],col="blue",main="Relative Performance",
xlab="Number of threads", ylab="Collapsed time / Data first time")
plot(op$Threads[1:5], op$runtime[1:5], type="l", col="blue",
xlab="Number of threads",ylab="Running time",
main="Speedup")
lines(data.speedup$Threads[1:5], data.speedup$runtime[1:5], col="red")
lines(filter.speedup$Threads[1:5], filter.speedup$runtime[1:5], col="black")
legend("bottomright",legend=c("Collapsed","Data first","Filter first"),col=c("blue","red","black"),lty=1)
View(filter.scaleup)
View(op)
