obj(K=4,pi0=0.4,pi1=0.3,gamma=10)
probs = function(K,pi0,pi1,gamma)
{
Pi = c(pi0,pi1)
for (s in 2:K)
{
Pi[s+1] = pi0*choose(K,s)*exp(s*log(pi1/pi0/K)+choose(s,2)*gamma)
}
Pi
}
ga = uniroot(f=obj,interval=c(-200,200),K=10,pi0=0.2,pi1=0.4)
Pi = probs(K=10,pi0=0.2,pi1=0.4,gamma=ga$root)
barplot(Pi)
ga = uniroot(f=obj,interval=c(-200,200),K=10,pi0=0.2,pi1=0.7)
Pi = probs(K=10,pi0=0.2,pi1=0.7,gamma=ga$root)
barplot(Pi)
Pi
plot(0:10,log(Pi))
ga = uniroot(f=obj,interval=c(-200,200),K=10,pi0=0.7,pi1=0.2)
Pi = probs(K=10,pi0=0.7,pi1=0.2,gamma=ga$root)
#barplot(Pi)
points(0:10,log(Pi))
barplot(Pi)
Pi
ga
choose(10,5)
library("quantmod")
library(doMC)
library(foreach)
install.packages("doMC","foreach")
install.packages("doMC")
install.packages("foreach")
library("quantmod")
library(doMC)
library(foreach)
DJIA =  c("AA", "AXP", "BA", "BAC", "CAT", "CSCO", "CVX", "DD", "DIS",
"GE", "HD", "HPQ", "IBM", "INTC", "JNJ", "JPM", "KO", "MCD", "MMM", "MRK",
"MSFT", "PFE", "PG", "T", "TRV", "UNH", "UTX", "VZ", "WMT", "XOM")
registerDoMC(2)
foreach(i=1:length(DJIA)) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
}
?assign
registerDoMC(2)
foreach(i=1:6) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
tmp = foreach(i=1:6) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
tmp[[1]]
head(tmp[[1]])
?foreach
tmp = foreach(i=1:6, .verbose=TRUE, ) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
tmp = foreach(i=1:6, .verbose=TRUE ) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
tmp = foreach(i=1:6, .export=DJIA[1:6] ) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
print(i)
assign(DJIA[i],get(tickers[1]))
}
assign("a",2)
?Ad
tmp = foreach(i=1:6, ) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
get(tickers[1])
}
tmp = foreach(i=1:6) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
get(tickers[1])
}
rm(tmp)
tmp = foreach(i=1:6) %dopar% {
tickers = try(getSymbols(DJIA[i], from = as.Date("2012-01-01"),
to = as.Date("2015-02-12"), auto.assign = TRUE),silent=TRUE)
get(tickers[1])
}
rm(a)
head(tmp[[2]])
head(tmp[[6]])
?sys.pause
??sys.pause
??pause
15%%5
15%%6
load("~/Dropbox/Learn.Investment/model/data/DJIA05to15.RData")
tmp = get(tickers[17])
plot(log(tmp[,6]))
scale(plot(log(tmp[,6])))
plot(scale(log(tmp[,6])))
get.feature = function(id,datalist)
{
tmp = datalist[[id]]
features = matrix(NA,nrow=nrow(tmp),ncol=37)
prc = scale(log(tmp[,6]+1))
features[,1] = vol = scale(log(tmp[,5]+1))
features[,2] = vol.ma5 = SMA(x=vol,n=5)
features[,3] = vol.ma20 = SMA(x=vol,n=20)
vol.ma100 = SMA(x=vol,n=100)
features[,4] = vol.R1 = vol-vol.ma20
features[,5] = vol.R2 = vol.ma5-vol.ma20
features[,6] = vol.R3 = vol.ma5-vol.ma100
features[,7] = vol.lag1 = lag(vol,1)-vol.ma20
features[,8] = vol.lag2 = lag(vol,2)-vol.ma20
features[,9] = vol.lag3 = lag(vol,3)-vol.ma20
features[,10] = vol.lag4 = lag(vol,4)-vol.ma20
features[,11] = vol.lag5 = lag(vol,5)-vol.ma20
prc.ma20 = SMA(x=prc,n=20)
prc.ma60 = SMA(x=prc,n=60)
prc.ma150 = SMA(x=prc,n=150)
features[,12] = dprc.ma20 = (prc.ma20-lag(prc.ma20,2))/2
features[,13] = dprc.ma60 = (prc.ma60-lag(prc.ma60,2))/2
features[,14] = dprc.ma150 = (prc.ma150-lag(prc.ma150,2))/2
features[,15] = diff1 = prc.ma20 - prc.ma60
features[,16] = diff2 = prc.ma20 - prc.ma150
features[,17] = diff3 = prc.ma60 - prc.ma150
features[,18] = prc - prc.ma20
features[,19] = prc - prc.ma60
features[,20] = prc - prc.ma150
features[,21] = cmf = CMF(tmp[,2:4],tmp[,5])
features[,22] = volatile = volatility(tmp[,1:4],calc="yang.zhang")
tdi = TDI(tmp[,6],n=30)
features[,23] = tdi[,1]
features[,24] = tdi[,2]
adx = ADX(tmp[,2:4])
features[,25:28] = adx[,1:4]
atr = ATR(tmp[,2:4])
features[,29:30] = atr[,1:2]
features[,31] = CCI(tmp[,2:4])
features[,32] = chaikinAD(tmp[,2:4],tmp[,5])
features[,33] = CMO(prc)
features[,34:35] = EMV(tmp[,2:3],tmp[,5])[,1:2]
features[,36:37] = KST(tmp[,6])
features
}
get.outcome = function(id,datalist,period=20,bin=FALSE,threshold=0.05,stoploss = -0.01)
{
tmp = datalist[[id]]
prc = tmp[,6]
prc.mat = matrix(NA,nrow=length(prc),ncol=period)
for (j in 1:period)
{
prc.mat[,j] = lag(prc,k=-j)
}
prc.future = cbind(prc,prc.mat)
max.up = apply(prc.future,1,max)
max.down = apply(prc.future,1,min)
chg.perc = (max.up-prc)/prc
if (bin)
{return(as.integer(chg.perc>threshold & (max.down-prc)/prc>stoploss))}
else
{return(cbind(chg.perc,(max.down-prc)/prc))}
}
X = get.feature(1,list(PG))
Y = get.outcome(1,list(PG),period=300,bin=TRUE,threshold=0.22,stoploss=-0.05)
hist(Y)
XY = as.data.frame(cbind(Y,X))
plot(1:2546,get("PG")[,6],type="l")
points((1:2546)[which(Y==1)],get("PG")[which(Y==1),6],pch=10,col="red")
lines((1:2546),SMA(get("PG")[,6],n=150))
lines((1:2546),SMA(get("PG")[,6],n=60),col="blue")
rf.fit1 = randomForest(factor(Y) ~ .,data=XY[200:2200,],
type="classification",mtry=5,ntree=500)
library("e1071")
library('randomForest')
rf.fit1 = randomForest(factor(Y) ~ .,data=XY[200:2200,],
type="classification",mtry=5,ntree=500)
pred1= predict(rf.fit1,newdata=XY[2201:2450,],type="prob")
positive = which(colnames(pred1)==1)
probpred = pred1[,positive]
table(XY[2201:2450,1],as.integer(probpred >= 0.5))
pred1= predict(rf.fit1,newdata=XY[2201:2450,],type="prob")
positive = which(colnames(pred1)==1)
probpred = pred1[,positive]
table(XY[2201:2450,1],as.integer(probpred >= 0.3))
table(XY[2201:2450,1],as.integer(probpred >= 0.4))
pred1= predict(rf.fit1,newdata=XY[201:2450,],type="prob")
positive = which(colnames(pred1)==1)
probpred = pred1[,positive]
table(XY[201:2450,1],as.integer(probpred >= 0.4))
library("quantmod")
library("xts")
?getQuote
getQuote("AAPL")
require("plyr")
what_metrics <- yahooQF(c("Price/Sales",
"P/E Ratio",
"Price/EPS Estimate Next Year",
"PEG Ratio",
"Dividend Yield",
"Market Capitalization"))
tickers <- c("AAPL", "FB", "GOOG", "HPQ", "IBM", "MSFT", "ORCL", "SAP")
# Not all the metrics are returned by Yahoo.
metrics <- getQuote(paste(tickers, sep="", collapse=";"), what=what_metrics)
View(metrics)
library("quantmod")
getFin('AAPL')
AAPL.f
viewFin
viewFin(AAPL.f)
AAPL.f$IS
AAPL.f$IS$Q
choose(3,2)
?solve
library(dplyr)
PiToTheta = function(Pis)
{
if (sum(Pis)!=1) {print("Please use proper probability.")}
pi0 = Pis[1]
pis = Pis[-1]
K = length(pis)
Y = matrix(NA,nrow=K,ncol=1)
for (s in 1:K)
{
Y[s,1] = log(pis[s]/pi0/choose(K,s))
}
M = matrix(0,nrow=K,ncol=K)
for (i in 1:K)
{
for (j in 1:i)
{
M[i,j] = choose(i,j)
}
}
theta = solve(M,Y)
}
(0.3,0.4,0.2,0.1) %>% PiToTheta()
c(0.3,0.4,0.2,0.1) %>% PiToTheta()
PiToTheta(c(0.3,0.4,0.2,0.1))
PiToTheta = function(Pis)
{
if (sum(Pis)!=1) {print("Please use proper probability.")}
pi0 = Pis[1]
pis = Pis[-1]
K = length(pis)
Y = matrix(NA,nrow=K,ncol=1)
for (s in 1:K)
{
Y[s,1] = log(pis[s]/pi0/choose(K,s))
}
M = matrix(0,nrow=K,ncol=K)
for (i in 1:K)
{
for (j in 1:i)
{
M[i,j] = choose(i,j)
}
}
theta = solve(M,Y)
theta
}
PiToTheta(c(0.3,0.4,0.2,0.1))
exp(-0.81)
exp(-0.81093)
exp(-0.81093)*0.3
exp(-0.8109302)*0.3*3
rdir
install.packages("gtools")
library(gtools)
?rdirichlet
rdirichlet(1,c(3,4,2,0.5,0.5))
rdirichlet(1,c(3,4,2,0.5,0.5))
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
library(dplyr)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
install.packages("dplyr")
library(dplyr)
library(gtools)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
install.packages("magrittr")
library(dplyr)
library(magrittr)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5))
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% sum()
PiToTheta = function(Pis)
{
if (abs(sum(Pis)-1)>1e-7) {print("Please use proper probability.")}
pi0 = Pis[1]
pis = Pis[-1]
K = length(pis)
Y = matrix(NA,nrow=K,ncol=1)
for (s in 1:K)
{
Y[s,1] = log(pis[s]/pi0/choose(K,s))
}
M = matrix(0,nrow=K,ncol=K)
for (i in 1:K)
{
for (j in 1:i)
{
M[i,j] = choose(i,j)
}
}
theta = solve(M,Y)
theta
}
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
registerDoMC(2)
theta.prior = foreach(i=1:500, .verbose=TRUE, .combine=rbind) %dopar% {
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
}
library(gtools)
library(doMC)
library(foreach)
registerDoMC(2)
theta.prior = foreach(i=1:500, .verbose=TRUE, .combine=rbind) %dopar% {
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.)
}
View(theta.prior)
registerDoMC(2)
theta.prior = foreach(i=1:500, .combine=rbind) %dopar% {
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.) %>% t(.)
}
View(theta.prior)
layout(matirx(1:4,nrow=2))
for (i in 1:4)
{hist(theta.prior[,i],breaks=25)}
layout(matrix(1,nrow=1))
layout(matrix(1:4,nrow=2))
for (i in 1:4)
{hist(theta.prior[,i],breaks=25)}
layout(matrix(1,nrow=1))
theta.prior = foreach(i=1:1000, .combine=rbind) %dopar% {
rdirichlet(1,c(3,4,2,0.5,0.5)) %>% PiToTheta(.) %>% t(.)
}
layout(matrix(1:4,nrow=2))
for (i in 1:4)
{hist(theta.prior[,i],breaks=25)}
layout(matrix(1,nrow=1))
corr(theta.prior)
cov(theta.prior)
biplot(theta.prior)
pairs(theta.prior)
cor(theta.prior)
registerDoMC(2)
theta.prior = foreach(i=1:1000, .combine=rbind) %dopar% {
rdirichlet(1,c(3,4,2,0.5,0.2,0.1,0.1,0.05,0.05)) %>% PiToTheta(.) %>% t(.)
}
layout(matrix(1:4,nrow=2))
for (i in 1:4)
{hist(theta.prior[,i],breaks=25)}
layout(matrix(1,nrow=1))
cor(theta.prior)
pairs(theta.prior)
layout(matrix(1:4,nrow=2))
for (i in 1:4)
{hist(theta.prior[,i],breaks=25)}
for (i in 5:8)
{hist(theta.prior[,i],breaks=25)}
layout(matrix(1,nrow=1))
layout(matrix(1:4,nrow=2))
for (i in 1:4)
{hist(theta.prior[,i],breaks=25),main=paste("theta ",i)}
for (i in 5:8)
{hist(theta.prior[,i],breaks=25),main=paste("theta ",i)}
layout(matrix(1,nrow=1))
layout(matrix(1:4,nrow=2))
for (i in 1:4)
{hist(theta.prior[,i],breaks=25,main=paste("theta ",i))}
for (i in 5:8)
{hist(theta.prior[,i],breaks=25,main=paste("theta ",i))}
layout(matrix(1,nrow=1))
install.packages("ggplot2")
library(ggplot2)
?plot_heatmap
??plot_heatmap
install.packages("phyloseq")
install.packages("MVB")
?mvb.simu
library(MVB)
n <- 1000
p <- 5
kk <- 2
tt <- NULL
alter <- 1
for (i in 1:kk) {
vec <- rep(0, p)
vec[i] <- alter
alter <- alter * (-1)
tt <- cbind(tt, vec)
}
tt
tt <- 1.5 * tt
tt <- cbind(tt, c(rep(0, p - 1), 1))
tt
x <- matrix(rnorm(n * p, 0, 4), n, p)
x
res <- mvb.simu(tt, x, K = kk, rep(.5, 2))
head(res[[1]])
setwd("~/Google Drive/PhD coursework/Course Materials/Parallel Programming/Assignment2/output/DES")
raw = read.table("speedupTime.txt",sep=":",header=FALSE)
spup.t = as.integer(raw$V2)
raw = read.table("scaleupTime.txt",sep=":",header=FALSE)
scup.t = as.integer(raw$V2)
spup = spup.t[1]/spup.t
scup = scup.t[1]/scup.t
plot(1:16,spup,type="l",col="blue",xlab="Number of Threads",ylab="Speedup: Ts/TL",
main="Fig.3 DES Key Speedup")
lines(1:16,1:16,col="black")
plot(2^(0:4),scup,type="l",col="blue",xlab="Number of Threads",ylab="Scaleup: Ts/TN",
main="Fig.4 DES Key Scaleup")
lines(2^(0:4), rep(1,5))
read.table("keylength.txt",header=FALSE,sep = " ")
keylength = read.table("keylength.txt",header=FALSE,sep = " ")[,c(3,5)]
tmp = c(spup.t,scup.t)
View(keylength)
keylength[1,2]
keylength[1,2]
keylength[1,5]
keylength[3,2]
class(keylength[3,2])
keylenth[37,2]/keylength[1,2]
keylength[37,2]/keylength[1,2]
log(keylength[37,2]/keylength[1,2],base=2)
log(keylength[1,2],2)
log(keylength[37,2],2)
tmp = c(spup.t,scup.t)
dat = data.frame(time=tmp,thread=c(1:16,1,2,4,8,16),keylength=c(rep(1,17),2,4,8,16))
View(dat)
fit = lm(time~thread+keylength+(keylength/thread), data=dat)
fit
lm(time~thread+keylength, data=dat)
dat = data.frame(time=tmp,thread=c(1:16,1,2,4,8,16),keylength=c(rep(1,17),2,4,8,16),
key_thread=c(rep(1,17),2,4,8,16)/c(1:16,1,2,4,8,16))
fit = lm(time~., data=dat)
fit
plot(dat$time,predict(fit))
View(dat)
dat = data.frame(time=tmp,thread=c(1:16,1,2,4,8,16),keylength=c(rep(1,17),2,4,8,16),
key_thread=c(rep(1,17),2,4,8,16)/c(1:16,1,2,4,8,16),threadInv = thread=c(1:16,1,2,4,8,16)^(-1))
fit = lm(time~., data=dat)
plot(dat$time,predict(fit))
dat = data.frame(time=tmp,thread=c(1:16,1,2,4,8,16),keylength=c(rep(1,17),2,4,8,16),
key_thread=c(rep(1,17),2,4,8,16)/c(1:16,1,2,4,8,16),threadInv =c(1:16,1,2,4,8,16)^(-1))
fit = lm(time~., data=dat)
plot(dat$time,predict(fit))
fit
summary(fit)
fit = lm(time~.+thread*keylength, data=dat)
summary(fit)
pwd()
dir()
read.table("extraTime.txt",sep=" ",header=FALSE)
rep(1:8,3)
rep(1:8,each=3)
rep(1:8,each=4)
read.table("extraTime.txt",sep=" ",header=FALSE)[,4]
tmp0 = read.table("extraTime.txt",sep=" ",header=FALSE)[,4]
tmp1 = c(spup.t[1:8],scup.t[1:4],tmp0)
dat = data.frame(time=tmp1,thread=c(1:8,1,2,4,8,rep(1:8,each=4)),
keylength=c(rep(1,9),2,4,8,rep(c(2,4,8,16),8)),
key_over_thread=c(rep(1,9),2,4,8,rep(c(2,4,8,16),8))/c(1:8,1,2,4,8,rep(1:8,each=4)),
threadInv =1/c(1:8,1,2,4,8,rep(1:8,each=4)))
View(dat)
fit = lm(time~., data=dat)
summary(fit)
plot(dat$time,predict(fit))
lines(c(1,60000),c(1,60000),col="red")
lines(c(1,61000),c(1,61000),col="red")
predict(fit,data.frame(S1=8,S2=2^7,t1=16,t0=1/8))
setwd("~/Google Drive/PhD coursework/Course Materials/Parallel Programming/Assignment2/output/DES")
tmp0 = read.table("extraTime.txt",sep=" ",header=FALSE)[,4]
tmp1 = c(spup.t[1:8],scup.t[1:4],tmp0)
dat = data.frame(time=tmp1,S1=c(1:8,1,2,4,8,rep(1:8,each=4)),
S2=c(rep(1,9),2,4,8,rep(c(2,4,8,16),8)),
t1=c(rep(1,9),2,4,8,rep(c(2,4,8,16),8))/c(1:8,1,2,4,8,rep(1:8,each=4)),
t0 =1/c(1:8,1,2,4,8,rep(1:8,each=4)))
fit = lm(time~.-1, data=dat)
plot(dat$time,predict(fit),xlab="Observed Running Time (ms)",ylab="Fitted Runnning Time (ms)")
lines(c(1,61000),c(1,61000),col="red")
predict(fit,data.frame(S1=8,S2=2^7,t1=16,t0=1/8))
predict(fit,data.frame(S1=64,S2=2^36,t1=2^36/64,t0=1/64))
predict(fit,data.frame(S1=64,S2=2^36,t1=2^36/64,t0=1/64))/1000/3600/24/365
